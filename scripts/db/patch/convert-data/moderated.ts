/** Generated by Claude */

import fs from "fs";
import path from "path";
import { Grade } from "@/config/grades";

// Target interface structure
interface StudentEntry {
  student: string;
  supervisor: string;
  reader: string;
  supervisorConductSubmission: any;
  supervisorPresentationSubmission: any;
  supervisorDissertationSubmission: any;
  readerDissertationSubmission: any;
  final: { comment: string; grade: number; letterGrade: string };
}

// Source data structure from level4-XXXXXXX-summary.json files
interface SourceAssessment {
  summary: string;
  grade: number;
  markerId: string;
  studentId: string;
  unitOfAssessmentId: string;
  unitOfAssessmentTitle: string;
  criterionScores: Array<{
    criterionTitle: string;
    criterionId: string;
    grade: number;
    justification: string;
  }>;
}

// Known unit assessment IDs from the sample data
const UNIT_ASSESSMENT_IDS = {
  CONDUCT: "7b7e1b93-ca85-4738-823a-c7d4298621c9",
  PRESENTATION: "91a755c9-c994-4a2c-b221-afb77229d208",
  DISSERTATION: "9ee86629-4e6c-4572-bea5-2c2dc695e6d4",
};

function convertAssessmentToSubmission(assessment: SourceAssessment) {
  const marks: Record<
    string,
    { mark: number; justification: string; letterGrade?: string }
  > = {};

  assessment.criterionScores.forEach((criterion) => {
    const grade = criterion.grade;
    marks[criterion.criterionId] = {
      mark: grade,
      justification: criterion.justification,
      letterGrade: grade === -1 ? "N/A" : Grade.toLetter(grade),
    };
  });

  const finalGrade = assessment.grade;

  return {
    unitOfAssessmentId: assessment.unitOfAssessmentId,
    grade: finalGrade,
    studentId: assessment.studentId,
    supervisorId: assessment.markerId,
    markerId: assessment.markerId,
    computed_grade: finalGrade,
    letterGrade: finalGrade === -1 ? "N/A" : Grade.toLetter(finalGrade),
    marks: marks,
    finalComment: assessment.summary,
    recommendation: false,
    draft: false,
  };
}

function processStudentFile(filePath: string): Partial<StudentEntry> | null {
  try {
    const rawData = fs.readFileSync(filePath, "utf8");
    const assessments = JSON.parse(rawData) as SourceAssessment[];

    if (assessments.length === 0) {
      console.warn(`No assessments found in ${filePath}`);
      return null;
    }

    const studentId = assessments[0].studentId;

    // Group assessments by type
    const conductAssessments = assessments.filter(
      (a) => a.unitOfAssessmentId === UNIT_ASSESSMENT_IDS.CONDUCT,
    );
    const presentationAssessments = assessments.filter(
      (a) => a.unitOfAssessmentId === UNIT_ASSESSMENT_IDS.PRESENTATION,
    );
    const dissertationAssessments = assessments.filter(
      (a) => a.unitOfAssessmentId === UNIT_ASSESSMENT_IDS.DISSERTATION,
    );

    // Find supervisor: person who marked conduct (and usually presentation)
    const supervisor = conductAssessments[0]?.markerId;
    if (!supervisor) {
      console.warn(`No conduct assessment found for student ${studentId}`);
      return null;
    }

    // Find reader: dissertation marker who is NOT the supervisor
    const reader = dissertationAssessments.find(
      (a) => a.markerId !== supervisor,
    )?.markerId;
    if (!reader) {
      console.warn(`No reader found for student ${studentId}`);
      return null;
    }

    console.log(`  Supervisor: ${supervisor}, Reader: ${reader}`);

    const studentEntry: Partial<StudentEntry> = {
      student: studentId,
      supervisor,
      reader,
      final: { comment: "", grade: -100, letterGrade: "MODERATE" },
    };

    // Convert conduct assessment
    const conductAssessment = conductAssessments.find(
      (a) => a.markerId === supervisor,
    );
    if (conductAssessment) {
      studentEntry.supervisorConductSubmission =
        convertAssessmentToSubmission(conductAssessment);
    }

    // Convert presentation assessment
    const presentationAssessment = presentationAssessments.find(
      (a) => a.markerId === supervisor,
    );
    if (presentationAssessment) {
      studentEntry.supervisorPresentationSubmission =
        convertAssessmentToSubmission(presentationAssessment);
    } else {
      // Create placeholder for missing presentation (grade -1 case)
      studentEntry.supervisorPresentationSubmission = {
        unitOfAssessmentId: UNIT_ASSESSMENT_IDS.PRESENTATION,
        grade: -1,
        studentId,
        supervisorId: supervisor,
        markerId: supervisor,
        computed_grade: -1,
        letterGrade: "N/A",
        marks: {},
        finalComment: "No submission",
        recommendation: false,
        draft: false,
      };
    }

    // Convert supervisor dissertation assessment
    const supervisorDissertation = dissertationAssessments.find(
      (a) => a.markerId === supervisor,
    );
    if (supervisorDissertation) {
      studentEntry.supervisorDissertationSubmission =
        convertAssessmentToSubmission(supervisorDissertation);
    }

    // Convert reader dissertation assessment
    const readerDissertation = dissertationAssessments.find(
      (a) => a.markerId === reader,
    );
    if (readerDissertation) {
      studentEntry.readerDissertationSubmission =
        convertAssessmentToSubmission(readerDissertation);
    }

    return studentEntry as StudentEntry;
  } catch (error) {
    console.error(`Error processing file ${filePath}:`, error);
    return null;
  }
}

const INPUT_DIR = "~/dev/amps/scripts/tmp"; // Adjust path as needed
const OUTPUT_FILE = "./src/db/scripts/data/converted/converted-mod-data.json";

function main() {
  // Find all level4-*-summary.json files that are NOT no-submission cases
  const files = fs
    .readdirSync(INPUT_DIR)
    .filter(
      (file) => file.startsWith("level4-") && file.endsWith("-summary.json"),
    )
    .map((file) => path.join(INPUT_DIR, file));

  console.log(`Found ${files.length} regular files to process`);

  const convertedStudents: StudentEntry[] = [];

  // Process each file
  files.forEach((file, index) => {
    console.log(
      `Processing ${index + 1}/${files.length}: ${path.basename(file)}`,
    );

    const studentEntry = processStudentFile(file);
    if (studentEntry) {
      convertedStudents.push(studentEntry as StudentEntry);
      console.log(`  Converted student: ${studentEntry.student}`);
    } else {
      console.log(`  Failed to convert: ${path.basename(file)}`);
    }
  });

  // Write output file
  console.log(
    `\nWriting ${convertedStudents.length} converted students to ${OUTPUT_FILE}`,
  );
  fs.writeFileSync(OUTPUT_FILE, JSON.stringify(convertedStudents, null, 2));

  console.log("Conversion complete!");
  console.log(`Output file: ${OUTPUT_FILE}`);

  // Summary
  console.log("\nSummary:");
  console.log(`- Total files processed: ${files.length}`);
  console.log(`- Successfully converted: ${convertedStudents.length}`);
  console.log(
    `- Failed conversions: ${files.length - convertedStudents.length}`,
  );
}

// Run the script
if (require.main === module) {
  main();
}

export { processStudentFile, convertAssessmentToSubmission };
