// import { expand, toInstanceId } from "@/lib/utils/general/instance-params";
// import { PrismaClient } from "@prisma/client";

// const db = new PrismaClient();

// async function copyInstance() {
//   const group = "socs";
//   const subGroup = "lvl-4-and-lvl-5-honours";
//   const oldInstance = "2024-2025";

//   const newInstance = "testinstance";
//   const newDisplayName = "Test Instance";

//   const oldParams = { group, subGroup, instance: oldInstance };
//   const newParams = { group, subGroup, instance: newInstance };

//   await db.$transaction(async (tx) => {
//     //Copy AllocationInstance
//     const instance = await tx.allocationInstance.findFirst({
//       where: toInstanceId(oldParams),
//     });

//     if (!instance) {
//       throw new Error(`Instance ${oldInstance} not found`);
//     }

//     const { id, ...instanceData } = instance; // Omit autogenerated fields
//     await tx.allocationInstance.create({
//       data: { ...instanceData, id: newInstance, displayName: newDisplayName },
//     });

//     console.log("Instance created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy Flags
//     const oldFlags = await tx.flag.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const flag of oldFlags) {
//       const { id, allocationInstanceId, ...rest } = flag; // Omit autogenerated fields
//       await tx.flag.create({
//         data: { ...rest, allocationInstanceId: newInstance },
//       });
//     }

//     console.log("Flags created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy Tags
//     const oldTags = await tx.tag.findMany({ where: { ...expand(oldParams) } });
//     for (const tag of oldTags) {
//       const { id, allocationInstanceId, ...rest } = tag; // Omit autogenerated fields
//       await tx.tag.create({
//         data: { ...rest, allocationInstanceId: newInstance },
//       });
//     }

//     console.log("Tags created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy UserInInstance
//     const oldUsers = await tx.userInInstance.findMany({
//       where: { ...expand(oldParams) },
//     });
//     const inst = await tx.allocationInstance.findFirst({
//       where: {
//         allocationGroupId: newParams.group,
//         allocationSubGroupId: newParams.subGroup,
//         id: newParams.instance,
//       },
//     });
//     if (!inst) {
//       throw new Error(`Instance ${newInstance} not found`);
//     }
//     for (const user of oldUsers) {
//       const { ...rest } = user; // Omit autogenerated fields
//       await tx.userInInstance.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("UserInInstances created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy StudentDetails
//     const oldStudentDetails = await tx.studentDetails.findMany({
//       where: { ...expand(oldParams) },
//     });

//     const studentIdMap = new Map(); // Map old student IDs to new student IDs
//     for (const studentDetail of oldStudentDetails) {
//       const { ...rest } = studentDetail; // Omit autogenerated fields
//       const newStudent = await tx.studentDetails.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//       studentIdMap.set(studentDetail.userId, newStudent.userId); // Map old to new
//     }

//     console.log("StudentDetails created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy ReaderDetails
//     const oldReaderDetails = await tx.readerDetails.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const readerDetail of oldReaderDetails) {
//       const { ...rest } = readerDetail; // Omit autogenerated fields
//       await tx.readerDetails.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("ReaderDetails created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy SupervisorDetails
//     const oldSupervisorDetails = await tx.supervisorDetails.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const supervisorDetail of oldSupervisorDetails) {
//       const { ...rest } = supervisorDetail; // Omit autogenerated fields
//       await tx.supervisorDetails.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("SupervisorDetails created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy Projects
//     const oldProjects = await tx.project.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const project of oldProjects) {
//       const { id, allocationInstanceId, ...rest } = project; // Omit autogenerated fields

//       await tx.project.create({
//         data: { ...rest, allocationInstanceId: newInstance },
//       });
//     }

//     console.log("Projects created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy UnitOfAssessment and AssessmentCriterion
//     const oldUnits = await tx.unitOfAssessment.findMany({
//       where: { ...expand(oldParams) },
//     });

//     for (const unit of oldUnits) {
//       const { id: oldUnitId, id, ...rest } = unit; // Omit autogenerated fields
//       const newUnit = await tx.unitOfAssessment.create({
//         data: { ...rest, allocationInstanceId: newInstance },
//       });

//       const oldCriteria = await tx.assessmentCriterion.findMany({
//         where: { unitOfAssessmentId: oldUnitId },
//       });
//       for (const criterion of oldCriteria) {
//         const { id, ...criterionRest } = criterion; // Omit autogenerated fields
//         await tx.assessmentCriterion.create({
//           data: { ...criterionRest, unitOfAssessmentId: newUnit.id },
//         });
//       }
//     }

//     console.log("Units and criteria created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     //Copy ComponentScore
//     const oldScores = await tx.componentScore.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const score of oldScores) {
//       const { id, ...rest } = score; // Omit autogenerated fields
//       await tx.componentScore.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Component scores created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy MarkerSubmissionComments
//     const oldComments = await tx.markerSubmissionComments.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const comment of oldComments) {
//       const { id, unitOfAssessmentId, ...rest } = comment; // Omit autogenerated fields
//       const oldUnit = await tx.unitOfAssessment.findUnique({
//         where: { id: unitOfAssessmentId },
//       });
//       if (!oldUnit) {
//         throw new Error(`Unit ${unitOfAssessmentId} not found`);
//       }
//       const newUnit = await tx.unitOfAssessment.findFirst({
//         where: { ...expand(newParams), title: oldUnit?.title },
//       });
//       if (!newUnit) {
//         throw new Error(`New unit ${oldUnit?.title} not found`);
//       }
//       await tx.markerSubmissionComments.create({
//         data: { ...rest, unitOfAssessmentId: newUnit.id, ...expand(newParams) },
//       });
//     }

//     console.log("Marker submission comments created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy Algorithm
//     const oldAlgorithms = await tx.algorithm.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const algorithm of oldAlgorithms) {
//       const { id, ...rest } = algorithm; // Omit autogenerated fields
//       await tx.algorithm.create({ data: { ...rest, ...expand(newParams) } });
//     }
//     console.log("Algorithms created successfully!");

//     // Copy MatchingResult and MatchingPair
//     const oldMatchingResults = await tx.matchingResult.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const result of oldMatchingResults) {
//       const { id: oldResultId, id, algorithmId, ...rest } = result; // Omit autogenerated fields
//       const oldAlg = await tx.algorithm.findUnique({
//         where: { id: algorithmId },
//       });
//       if (!oldAlg) {
//         throw new Error(`Algorithm ${algorithmId} not found`);
//       }
//       const newAlg = await tx.algorithm.findFirst({
//         where: { ...expand(newParams), displayName: oldAlg.displayName },
//       });
//       if (!newAlg) {
//         throw new Error(`New algorithm ${oldAlg.displayName} not found`);
//       }
//       const newResult = await tx.matchingResult.create({
//         data: {
//           ...rest,
//           algorithmId: newAlg.id,
//           allocationInstanceId: newInstanceId,
//         },
//       });

//       const oldPairs = await tx.matchingPair.findMany({
//         where: { matchingResultId: oldResultId },
//       });
//       for (const pair of oldPairs) {
//         const { ...pairRest } = pair; // Omit autogenerated fields
//         await tx.matchingPair.create({
//           data: { ...pairRest, matchingResultId: newResult.id },
//         });
//       }
//     }

//     console.log("Matching results and pairs created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy FinalGrade
//     const oldFinalGrades = await tx.finalGrade.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const grade of oldFinalGrades) {
//       const { id, ...rest } = grade; // Omit autogenerated fields
//       await tx.finalGrade.create({ data: { ...rest, ...expand(newParams) } });
//     }

//     console.log("Final grades created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy StudentDraftPreference
//     const oldStudentDraftPreferences = await tx.studentDraftPreference.findMany(
//       { where: { ...expand(oldParams) } },
//     );
//     for (const preference of oldStudentDraftPreferences) {
//       const { ...rest } = preference; // Omit autogenerated fields
//       await tx.studentDraftPreference.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Student draft preferences created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy StudentSubmittedPreference
//     const oldStudentSubmittedPreferences =
//       await tx.studentSubmittedPreference.findMany({
//         where: { ...expand(oldParams) },
//       });
//     for (const preference of oldStudentSubmittedPreferences) {
//       const { ...rest } = preference; // Omit autogenerated fields
//       await tx.studentSubmittedPreference.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Student submitted preferences created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy StudentProjectAllocation
//     const oldStudentProjectAllocations =
//       await tx.studentProjectAllocation.findMany({
//         where: { ...expand(oldParams) },
//       });
//     for (const allocation of oldStudentProjectAllocations) {
//       const { ...rest } = allocation; // Omit autogenerated fields
//       await tx.studentProjectAllocation.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Student project allocations created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy ReaderDraftPreference
//     const oldReaderDraftPreferences = await tx.readerDraftPreference.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const preference of oldReaderDraftPreferences) {
//       const { ...rest } = preference; // Omit autogenerated fields
//       await tx.readerDraftPreference.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Reader draft preferences created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy ReaderSubmittedPreference
//     const oldReaderSubmittedPreferences =
//       await tx.readerSubmittedPreference.findMany({
//         where: { ...expand(oldParams) },
//       });
//     for (const preference of oldReaderSubmittedPreferences) {
//       const { ...rest } = preference; // Omit autogenerated fields
//       await tx.readerSubmittedPreference.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Reader submitted preferences created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy ReaderProjectAllocation
//     const oldReaderProjectAllocations =
//       await tx.readerProjectAllocation.findMany({
//         where: { ...expand(oldParams) },
//       });
//     for (const allocation of oldReaderProjectAllocations) {
//       const { ...rest } = allocation; // Omit autogenerated fields
//       await tx.readerProjectAllocation.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Reader project allocations created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy FlagOnProject
//     // Copy TagOnProject
//     const newProjects = await tx.project.findMany({
//       where: { ...expand(newParams) },
//     });

//     for (const project of newProjects) {
//       const oldFlagsOnProject = await tx.flagOnProject.findMany({
//         where: { projectId: project.id },
//       });
//       for (const flagOnProject of oldFlagsOnProject) {
//         await tx.flagOnProject.create({
//           data: { flagId: flagOnProject.flagId, projectId: project.id },
//         });
//       }

//       const oldTagsOnProject = await tx.tagOnProject.findMany({
//         where: { projectId: project.id },
//       });
//       for (const tagOnProject of oldTagsOnProject) {
//         await tx.tagOnProject.create({
//           data: { tagId: tagOnProject.tagId, projectId: project.id },
//         });
//       }
//     }

//     console.log("Flags and tags on projects created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy FinalUnitOfAssessmentGrade
//     const oldFinalUnitOfAssessmentGrades =
//       await tx.finalUnitOfAssessmentGrade.findMany({
//         where: { ...expand(oldParams) },
//       });
//     for (const grade of oldFinalUnitOfAssessmentGrades) {
//       const { ...rest } = grade; // Omit autogenerated fields
//       await tx.finalUnitOfAssessmentGrade.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Final unit of assessment grades created successfully!");
//   });

//   await db.$transaction(async (tx) => {
//     // Copy FlagOnStudent
//     const oldFlagsOnStudent = await tx.flagOnStudent.findMany({
//       where: { ...expand(oldParams) },
//     });
//     for (const flagOnStudent of oldFlagsOnStudent) {
//       const { ...rest } = flagOnStudent; // Omit autogenerated fields
//       await tx.flagOnStudent.create({
//         data: { ...rest, ...expand(newParams) },
//       });
//     }

//     console.log("Flags on students created successfully!");
//   });

//   console.log("Instance copied successfully!");
// }

// copyInstance().catch((e) => {
//   console.error(e);
//   process.exit(1);
// });
