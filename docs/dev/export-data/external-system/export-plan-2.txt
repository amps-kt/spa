
current implementation:

3 buttons -> 3 individual calls to external system

first two can happen in any order, provided they happen before the third one
- check students
- check supervisors
3. create projects

---

new implementation:

2 buttons:

button 1: 2 calls to external system to check students + supervisors

-> results should be put into two CSVs
    - one containing all users
    - one containing only the users that are missing from the external system
    (potentially) display the results in a data table as well

button 2: 1 call to external system to create projects
- cannot be clicked unless both the previous checks pass (we need to persist these results)
- should have two-step button click process ("Are you sure you wanna do this?")
- can only be clicked once (we need to persist this somewhere too)


--- plan

-> fetch whether or not button is disabled (if disabled, exportedToExternalSystem is true)

    allSupervisorsChecked       = true
    allStudentsChecked          = false
    exportedToExternalSystem    = false
    parentInstanceId            = null

    disabled = {
        !allSupervisorsChecked ||
        !allStudentsChecked ||
        exportedToExternalSystem ||
        parentInstanceId
    }


checkUsers

1. checkSupervisors

supervisorResult <- await api.institution.instance.checkSupervisors()
await db.adminInstanceDetails.update({ allSupervisorsChecked:supervisorResult })


2. checkStudents
studentResult <- await api.institution.instance.checkStudents()
await db.adminInstanceDetails.update({ allStudentsChecked:studentResult })


return { 
    supervisorData:{ all, absent, success: supervisorResult }, 
    studentData:{ all, absent, success: studentResult }
}


createProjects






