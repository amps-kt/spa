
let pid = parent allocationInstanceId
let fid = forked allocationInstanceId

let p = db.allocationInstance.where(id===pid).include(users, projects, flags, tags)
p.students = users.filter(Role.STUDENT)
p.supervisors = users.filter(Role.SUPERVISOR)


let f = db.allocationInstance.where(id===fid).include(users, projects, flags, tags)
f.students = users.filter(Role.STUDENT)
f.supervisors = users.filter(Role.SUPERVISOR)


- Creating new supervisors, students and projects (not on parent instance)
        1) Go through the forked instance and check if the student is on the parent instance (using userId)
            2) If they are in the parent instance -> don't do anything. 
            3) If they are not in the parent instance -> create a new UserInInstance on the parent instance.
                4) Set the allocationInstanceId to the parentInstanceId, set the allocationInstance to the parent allocationInstance, and use the rest of the student details
    
    
    // write pseudo code here

    1) newStudents = setDiff(f.students, p.students)
    2)
    3) 4) db.UserInInstance.createMany(newStudents.map((fid, ...rest)=>({pid, ...rest}))) 
    
    
    
    -------------------------------------
    - Supervisors
        1) Go through the forked instance and check if the supervisor is on the parent instance (using userId)
            2) If they are in the parent instance -> don't do anything. 
            3) If they are not in the parent instance -> create a new UserInInstance on the parent instance.
                4) Set the allocationInstanceId to the parentInstanceId, set the allocationInstance to the parent allocationInstance, and use the rest of the supervisor details
                5) create a new supervisorInstanceDetails, carry over the capacities from the forked allocationInstance, set the allocationInstanceId to the parentInstanceId
    
    
    // write pseudo code here

    1) newSupervisors = setDiff(f.students, p.students)
    2)
        let newSupervisorData = newSupervisors.map((fid, ...rest)=>({pid, ...rest})
        let newSupervisorInstanceDetails = newSupervisorData.map(x=>x.supervisorInstanceDetails[0])
        
    3) 4) db.UserInInstance.createMany(newSupervisorData) 
    5) db.supervisorInstanceDetails.createMany(newSupervisorInstanceDetails)
    
    
    -------------------------------------    
    - Flags
        1) if there are new Flags 
            2) copy them over and update allocationInstanceId to parentInstanceId
        3) if some Flags were deleted from the forked instance -> do nothing (they should remain in tha parent instance)
        
    // write pseudo code here

    1) newFlags = setDiff(f.flags, p.flags)
    2) db.Flags.createMany(newFlags.map((fid, ...rest)=>({pid, ...rest}))) 
    3)
        
    -------------------------------------
    - Tags
        1) if there are new Tags 
            2) copy them over and update allocationInstanceId to parentInstanceId
        3) if some Tags were deleted from the forked instance -> do nothing (they should remain in tha parent instance)

    // write pseudo code here

    1) newTags = setDiff(f.tags, p.tags)
    2) db.Tags.createMany(newTags.map((fid, ...rest)=>({pid, ...rest}))) 
    3) 
   
   
    -------------------------------------
    - Projects
        - Go through the forked instance and check if the project is on the parent instance (using project title)
        1) If they are in the parent instance
            - OLD Projects
                2) has anything changed? (descriptions, preAllocatedStudentId, capacityUpperBound) if so carry over those changes
                    !!!!!! capacityUpperBound !!!!!!
        3) If they are not in the parent instance
            - NEW Projects
                4) create new projects on the parent instance, carry over all details from forked instance except the allocationInstanceId which will be set to the parentInstanceId
   
   1) updatedProjects = setIntersection(f.projects, p.projects)
   
   function fixCapacity(parentProject, forkedProject) {
    let b = parentProject.allocations.length
    let d = forkedProject.capacityUpperBound
    return b+d
    }

   2) updatedProjectData = updatedProjects.map(up=>{
    parentEquivalentProject = findItemByTitle(p.projects, up.title)
    return {
        ...parentEquivalentProject
        description:up.description,
        preAllocatedStudentId:u.preAllocatedStudentId    
        newCapacity: fixCapacity(parentEquivalentProject, up)
    }
   })
   2) db.projects.updateMany(updatedProjectData) // test what happens if there are no changes made



   3) newProjects = setDiff(f.projects, updatedProjects)

   4) newProjectData = newProjects.map((fid, ...rest)=>({pid, ...rest}))
   4) db.projects.createMany(newProjectData)


    -------------------------------------
    - FlagsOnProjects
        1) check if old project
            - if it's an UPDATED project
                2) update the parent FlagOnProjects to match the forked FlagOnProject (this should be "flagged" on the Form)
            - if it's a NEW project 
                3) create the equivalent FlagOnProjects in the parent allocationInstance
   
   
   const allFlagOnProjects = db.FlagOnProject.findMany({
        where: {project:{
            id:fid
        }}
   })

   for FonP in allFlagOnProjects {
        if (updatedProjects.includes(FonP.project)) {
            2) db.FlagsOnProjects.deleteMany(where:{projectId=FonP.project.id})
        }
        2 & 3) db.FlagsOnProjects.createMany(data:{FonP})
   }


    
   
   
    -------------------------------------
    - TagsOnProjects
        1) check if old project
            -   if it's an OLD project
                2) update the parent TagOnProjects to match the forked TagOnProject (this should be "flagged" on the Form)
            - if it's a NEW project 
                3) create the equivalent TagOnProjects in the parent allocationInstance
   
      const allTagOnProjects = db.TagOnProject.findMany({
        where: {project:{
            id:fid
        }}
   })

   for TonP in allTagOnProjects {
        if (updatedProjects.includes(TonP.project)) {
            2) db.TagsOnProjects.deleteMany(where:{projectId=TonP.project.id})
        }
        2 & 3) db.TagsOnProjects.createMany(data:{TonP})
   }
   
   
    -------------------------------------
    - Project Allocations
        - all of these are NEW
        1) find which project they refer to using title
        2) find which student they refer to using userId
        3) create a new projectAllocation row in db using the ids from the project and student found above
        4) carry over the rank from the forked instance projectAllocation
   
   const F = db.ProjectAllocation.findMany({
    where: {allocationInstanceId = f.id},
   })
   
   const allParentProjectsAfterStartingMerge = db.project.findMany(where id:pid)
   const allParentStudentsAfterStartingMerge = db.UserInInstance.findMany(where id:pid && role:Student)

   for a in F {
        1) parentEquivalentProject = findItemByTitle(allParentProjectsAfterStartingMerge, a.project.title) // 
        2) parentEquivalentUserInInstance = findUserById(allParentStudentsAfterStartingMerge, a.userId)
        3 & 4) db.ProjectAllocation.create({
            data:{
                projectId: parentEquivalentProject.id
                userId: parentEquivalentUserInInstance.id
                studentRanking: a.studentRanking
            }
        })
        

   }

   
    -------------------------------------
    - Algorithm
        - admin added some new ones
            - copy those to the parent allocationInstance
        - admin removed some of the old ones
            - do nothing

    