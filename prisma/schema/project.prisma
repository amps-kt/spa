enum StudentPreferenceType {
  SHORTLIST
  PREFERENCE

  @@map("student_preference_type")
}

enum AllocationMethod {
  PRE_ALLOCATED
  ALGORITHMIC
  MANUAL
  RANDOM

  @@map("allocation_method")
}

model Project {
  id                            String                       @id @default(uuid())
  title                         String
  description                   String
  extraInformation              String?                      @map("extra_information")
  latestEditDateTime            DateTime                     @default(now()) @map("latest_edit_date_time")
  capacityLowerBound            Int                          @map("capacity_lower_bound")
  capacityUpperBound            Int                          @map("capacity_upper_bound")
  preAllocatedStudentId         String?                      @map("pre_allocated_student_id")
  preAllocatedStudent           StudentDetails?              @relation(fields: [preAllocatedStudentId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, map: "project_preallocated_student")
  // ---
  allocationGroupId             String                       @map("allocation_group_id")
  allocationSubGroupId          String                       @map("allocation_sub_group_id")
  allocationInstanceId          String                       @map("allocation_instance_id")
  allocationInstance            AllocationInstance           @relation(fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade, map: "project_instance")
  // ---
  supervisorId                  String                       @map("supervisor_id")
  supervisor                    SupervisorDetails            @relation(fields: [supervisorId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, map: "project_supervisor")
  // ---
  inStudentDraftPreferences     StudentDraftPreference[]
  inStudentSubmittedPreferences StudentSubmittedPreference[]
  studentAllocations            StudentProjectAllocation[]
  readerAllocations             ReaderProjectAllocation[]    @relation(name: "project_reader")
  matchingPairs                 MatchingPair[]
  // ---
  flagsOnProject                FlagOnProject[]
  tagsOnProject                 TagOnProject[]
  readerPreferences             ReaderPreference[]

  @@map("project")
}

model StudentDraftPreference {
  projectId            String                @map("project_id")
  userId               String                @map("user_id")
  score                Float
  type                 StudentPreferenceType
  // ---
  allocationGroupId    String                @map("allocation_group_id")
  allocationSubGroupId String                @map("allocation_sub_group_id")
  allocationInstanceId String                @map("allocation_instance_id")
  // ---
  project              Project               @relation(fields: [projectId], references: [id], onDelete: Cascade, map: "student_draft_preference_project")
  student              StudentDetails        @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, map: "student_draft_preference_student")

  @@id([projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], name: "draftPreferenceId")
  @@map("student_draft_preference")
}

model StudentSubmittedPreference {
  projectId            String         @map("project_id")
  userId               String         @map("user_id")
  rank                 Int
  // ---
  allocationGroupId    String         @map("allocation_group_id")
  allocationSubGroupId String         @map("allocation_sub_group_id")
  allocationInstanceId String         @map("allocation_instance_id")
  // ---
  project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade, map: "student_preference_project")
  student              StudentDetails @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, map: "student_preference_student")

  @@id([projectId, userId], name: "studentSubmittedPreferenceId", map: "student_submitted_preference_id")
  @@map("submitted_preference")
}

model StudentProjectAllocation {
  projectId            String           @map("project_id")
  userId               String           @map("user_id")
  studentRanking       Int              @map("student_ranking")
  allocationMethod     AllocationMethod @default(ALGORITHMIC)
  createdAt            DateTime         @default(now()) @map("created_at")
  // ---
  allocationGroupId    String           @map("allocation_group_id")
  allocationSubGroupId String           @map("allocation_sub_group_id")
  allocationInstanceId String           @map("allocation_instance_id")
  // ---
  project              Project          @relation(fields: [projectId], references: [id], onDelete: Cascade, map: "spa_project")
  student              StudentDetails   @relation("project_allocation", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, map: "spa_student")
  finalGrade           FinalGrade?

  @@id([userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], name: "studentProjectAllocationId", map: "student_project_allocation_id")
  @@map("student_project_allocation")
}

// Reader project matching

model ReaderPreference {
  readerId             String               @map("reader_id")
  projectId            String               @map("project_id")
  type                 ReaderPreferenceType
  // ---
  allocationGroupId    String               @map("allocation_group_id")
  allocationSubGroupId String               @map("allocation_sub_group_id")
  allocationInstanceId String               @map("allocation_instance_id")
  // ---
  project              Project              @relation(fields: [projectId], references: [id], map: "reader_preference_project")
  reader               ReaderDetails        @relation(fields: [readerId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, map: "reader_preference_reader")

  @@id([readerId, projectId])
  @@map("reader_preference")
}

enum ReaderPreferenceType {
  PREFERRED
  UNACCEPTABLE
  @@map("reader_preference_type")
}

model ReaderProjectAllocation {
  readerId             String        @map("reader_id")
  reader               ReaderDetails @relation("reader_project_allocation", fields: [readerId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, map: "rpa_reader")
  projectId            String        @map("project_id")
  project              Project       @relation("project_reader", fields: [projectId], references: [id], onDelete: Cascade, map: "rpa_project")
  // ---
  allocationGroupId    String        @map("allocation_group_id")
  allocationSubGroupId String        @map("allocation_sub_group_id")
  allocationInstanceId String        @map("allocation_instance_id")

  @@id([readerId, projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], name: "readerProjectAllocationId", map: "reader_project_allocation_id")
  @@map("reader_project_allocation")
}

// Flags and tags
model FlagOnProject {
  flag      Flag    @relation(fields: [flagId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [id, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, map: "flag_project_flag")
  flagId    String  @map("flag_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, map: "flag_project_project")
  projectId String  @map("project_id")

  allocationGroupId    String             @map("allocation_group_id")
  allocationSubGroupId String             @map("allocation_sub_group_id")
  allocationInstanceId String             @map("allocation_instance_id")
  // ---
  allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)

  @@id([flagId, projectId], name: "flagOnProjectId", map: "flag_on_project_id")
  @@map("flag_on_project")
}

model TagOnProject {
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "tag_project_tag")
  tagId     String  @map("tag_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, map: "tag_project_project")
  projectId String  @map("project_id")

  @@id([tagId, projectId], name: "tagOnProjectId", map: "tag_on_project_id")
  @@map("tag_on_project")
}
