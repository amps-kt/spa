enum PreferenceType {
    SHORTLIST
    PREFERENCE

    @@map("preference_type")
}

model Project {
    id                            String                       @id @default(uuid())
    title                         String
    description                   String
    specialTechnicalRequirements  String?                      @map("special_technical_requirements")
    latestEditDateTime            DateTime                     @default(now()) @map("latest_edit_date_time")
    capacityLowerBound            Int                          @map("capacity_lower_bound")
    capacityUpperBound            Int                          @map("capacity_upper_bound")
    preAllocatedStudentId         String?                      @map("pre_allocated_student_id")
    preAllocatedStudent           StudentDetails?              @relation(fields: [preAllocatedStudentId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    // ---
    allocationGroupId             String                       @map("allocation_group_id")
    allocationSubGroupId          String                       @map("allocation_sub_group_id")
    allocationInstanceId          String                       @map("allocation_instance_id")
    allocationInstance            AllocationInstance           @relation(fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id])
    // ---
    supervisorId                  String                       @map("supervisor_id")
    supervisor                    SupervisorDetails            @relation(fields: [supervisorId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    // ---
    inStudentDraftPreferences     StudentDraftPreference[]
    inStudentSubmittedPreferences StudentSubmittedPreference[]
    inReaderDraftPreferences      ReaderDraftPreference[]
    inReaderSubmittedPreferences  ReaderSubmittedPreference[]
    studentAllocations            StudentProjectAllocation[]
    readerAllocations             ReaderProjectAllocation[]
    matchingPairs                 MatchingPair[]
    // ---
    flagsOnProject                FlagOnProject[]
    tagsOnProject                 TagOnProject[]

    @@map("project")
}

model StudentDraftPreference {
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    score                Float
    type                 PreferenceType
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---
    project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    student              StudentDetails @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "draftPreferenceId", [projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model StudentSubmittedPreference {
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    rank                 Int
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---
    project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    student              StudentDetails @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "studentSubmittedPreferenceId", map: "student_submitted_preference_id", [projectId, userId])
    @@map("submitted_preference")
}

model StudentProjectAllocation {
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    studentRanking       Int            @map("student_ranking")
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---
    project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    student              StudentDetails @relation(name: "project_allocation", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    finalGrade           FinalGrade?

    @@id(name: "studentProjectAllocationId", map: "student_project_allocation_id", [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("student_project_allocation")
}

model ReaderDraftPreference {
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    score                Float
    type                 PreferenceType
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---
    project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@id(name: "readerDraftPreferenceId", [projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model ReaderSubmittedPreference {
    projectId            String  @map("project_id")
    userId               String  @map("user_id")
    rank                 Int
    // ---
    allocationGroupId    String  @map("allocation_group_id")
    allocationSubGroupId String  @map("allocation_sub_group_id")
    allocationInstanceId String  @map("allocation_instance_id")
    // ---
    project              Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@id(name: "readerSubmittedPreferenceId", map: "reader_submitted_preference_id", [projectId, userId])
    @@map("reader_submitted_preference")
}

model ReaderProjectAllocation {
    readerId             String         @map("reader_id")
    reader               ReaderDetails  @relation(fields: [readerId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    projectId            String         @map("project_id")
    project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    studentId            String         @map("user_id")
    student              StudentDetails @relation(fields: [studentId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    thirdMarker          Boolean        @default(false) @map("third_marker")
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")

    @@id(name: "readerProjectAllocationId", map: "reader_project_allocation_id", [readerId, studentId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@unique([studentId, thirdMarker, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("reader_project_allocation")
}

model FlagOnProject {
    flag      Flag    @relation(fields: [flagId], references: [id], onDelete: Cascade)
    flagId    String  @map("flag_id")
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String  @map("project_id")

    @@id(name: "flagOnProjectId", map: "flag_on_project_id", [flagId, projectId])
    @@map("flag_on_project")
}

model TagOnProject {
    tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId     String  @map("tag_id")
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String  @map("project_id")

    @@id(name: "tagOnProjectId", map: "tag_on_project_id", [tagId, projectId])
    @@map("tag_on_project")
}
