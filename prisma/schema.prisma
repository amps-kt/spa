generator client {
    provider = "prisma-client-js"
}

// generator kysely {
//     provider = "prisma-kysely"
//     output   = "../src/lib"
// }

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL") // uses connection pooling
}

enum Role {
    GROUP_ADMIN
    SUB_GROUP_ADMIN
    SUPERVISOR
    STUDENT
    UNREGISTERED
}

enum Stage {
    SETUP
    PROJECT_SUBMISSION
    PROJECT_SELECTION
    PROJECT_ALLOCATION
    ALLOCATION_PUBLICATION
}

model GroupAdmin {
    id                String           @id @default(uuid())
    name              String
    email             String
    allocationGroup   AllocationGroup?
    allocationGroupId String?
}

model SubGroupAdmin {
    id                   String             @id @default(uuid())
    name                 String
    email                String
    allocationSubGroup   AllocationSubGroup @relation(fields: [allocationSubGroupId], references: [id])
    allocationSubGroupId String
}

model Supervisor {
    id                  String               @id @default(uuid())
    name                String
    email               String // TODO: make unique + link to Invitation
    projects            Project[]
    allocationInstances AllocationInstance[]
}

model Student {
    id                  String               @id @default(uuid())
    name                String
    email               String // TODO: make unique + link to Invitation
    schoolId            String               @unique
    flags               Flag[]
    shortlist           Shortlist[]
    preferences         Preference[]
    allocations         Allocation[]
    allocationInstances AllocationInstance[]
}

model AllocationGroup {
    id                  String               @id @default(uuid())
    name                String               @unique
    groupAdmin          GroupAdmin           @relation(fields: [groupAdminId], references: [id])
    groupAdminId        String               @unique
    allocationSubGroups AllocationSubGroup[]
}

model AllocationSubGroup {
    id                  String               @id @default(uuid())
    name                String
    subGroupAdmins      SubGroupAdmin[]
    allocationGroup     AllocationGroup      @relation(fields: [allocationGroupId], references: [id])
    allocationGroupId   String
    allocationInstances AllocationInstance[]
}

model AllocationInstance {
    id                   String             @id @default(uuid())
    allocationSubGroup   AllocationSubGroup @relation(fields: [allocationSubGroupId], references: [id])
    allocationSubGroupId String
    name                 String
    stage                Stage
    projects             Project[]
    supervisors          Supervisor[]
    students             Student[]
}

model Project {
    id                   String             @id @default(uuid())
    title                String
    description          String
    supervisor           Supervisor         @relation(fields: [supervisorId], references: [id])
    supervisorId         String
    allocationInstance   AllocationInstance @relation(fields: [allocationInstanceId], references: [id])
    allocationInstanceId String
    flags                Flag[]
    tags                 Tag[]
    shortlistedIn        Shortlist[]
    preferenceIn         Preference[]
    allocatedTo          Allocation?
}

model Shortlist {
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
    student   Student @relation(fields: [studentId], references: [id])
    studentId String

    @@id([projectId, studentId])
}

model Preference {
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
    student   Student @relation(fields: [studentId], references: [id])
    studentId String
    rank      Int

    @@id([projectId, studentId])
    @@unique([rank, studentId])
}

model Allocation {
    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @unique
    student   Student @relation(fields: [studentId], references: [id])
    studentId String

    @@id([projectId, studentId])
}

model Flag {
    id       String    @id @default(uuid())
    title    String    @unique
    students Student[]
    projects Project[]
}

model Tag {
    id       String    @id @default(uuid())
    title    String    @unique
    projects Project[]
}

model Invitation {
    userEmail  String @id
    role       Role
    signUpCode String @default(uuid())

    @@unique([userEmail, role])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// model Test {
//     id String @id @default(uuid())
// }
