generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider      = "zod-prisma"
    output        = "../src/types/zod"
    relationModel = true
    useDecimalJs  = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    SUPER_ADMIN
    GROUP_ADMIN
    SUB_GROUP_ADMIN
    SUPERVISOR
    STUDENT
    UNREGISTERED
}

enum Stage {
    SETUP
    PROJECT_SUBMISSION
    PROJECT_SELECTION
    PROJECT_ALLOCATION
    ALLOCATION_PUBLICATION
}

// group manager
model SuperAdmin {
    id               String            @id @default(uuid())
    name             String
    email            String
    allocationGroups AllocationGroup[]

    @@unique([email])
}

// subgroup manager
model GroupAdmin {
    id                String          @id @default(uuid())
    name              String
    email             String
    allocationGroup   AllocationGroup @relation(fields: [allocationGroupId], references: [slug])
    allocationGroupId String          @map("allocation_group_slug")

    @@unique([email])
}

// instance manager
model SubGroupAdmin {
    id                   String             @id @default(uuid())
    name                 String
    email                String
    allocationSubGroup   AllocationSubGroup @relation(fields: [allocationGroupId, allocationSubGroupId], references: [allocationGroupId, slug])
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")

    @@unique([email])
}

model Supervisor {
    id                   String                 @id @default(uuid()) @map("student_id")
    name                 String
    email                String
    projects             Project[]
    supervisorInInstance SupervisorInInstance[]

    @@unique([email])
}

model Student {
    id                String              @id @default(uuid()) @map("staff_id")
    name              String
    email             String
    flags             Flag[]
    shortlist         Shortlist[]
    preferences       Preference[]
    allocations       ProjectAllocation[]
    studentInInstance StudentInInstance[]
    flagOnStudent     FlagOnStudent[]

    @@unique([email])
}

model AllocationGroup {
    slug                String               @id
    displayName         String               @unique
    // managed by 1
    superAdmin          SuperAdmin           @relation(fields: [superAdminId], references: [id])
    superAdminId        String               @map("super_admin_id")
    // includes many
    groupAdmins         GroupAdmin[]
    allocationSubGroups AllocationSubGroup[]
}

model AllocationSubGroup {
    slug                String
    displayName         String               @map("display_name")
    //belongs to 1
    allocationGroup     AllocationGroup      @relation(fields: [allocationGroupId], references: [slug])
    allocationGroupId   String               @map("allocation_group_id")
    // includes many
    subGroupAdmins      SubGroupAdmin[]
    allocationInstances AllocationInstance[]

    @@id([allocationGroupId, slug])
    @@unique([allocationGroupId, slug])
}

model AllocationInstance {
    displayName           String                 @map("display_name")
    slug                  String
    stage                 Stage                  @default(SETUP)
    // belongs to 1
    allocationSubGroup    AllocationSubGroup     @relation(fields: [allocationGroupId, allocationSubGroupId], references: [allocationGroupId, slug])
    allocationGroupId     String                 @map("allocation_group_id")
    allocationSubGroupId  String                 @map("allocation_sub_group_id")
    // has many
    projects              Project[]
    supervisorsInInstance SupervisorInInstance[]
    studentsInInstance    StudentInInstance[]

    @@id([allocationGroupId, allocationSubGroupId, slug])
    @@unique([allocationSubGroupId, slug])
}

model SupervisorInInstance {
    supervisor                  Supervisor         @relation(fields: [supervisorId], references: [id])
    supervisorId                String             @map("supervisor_id")
    allocationInstance          AllocationInstance @relation(fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, slug])
    allocationGroupId           String             @map("allocation_group_id")
    allocationSubGroupId        String             @map("allocation_sub_group_id")
    allocationInstanceId        String             @map("allocation_instance_id")
    projectAllocationTarget     Int                @map("project_allocation_target")
    projectAllocationUpperBound Int                @map("project_allocation_upper_bound")

    @@id([supervisorId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model StudentInInstance {
    student              Student            @relation(fields: [studentId], references: [id])
    allocationInstance   AllocationInstance @relation(fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, slug])
    studentId            String             @map("student_id")
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")

    @@id([studentId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model Project {
    id                   String             @id @default(uuid())
    title                String
    description          String
    supervisor           Supervisor         @relation(fields: [supervisorId], references: [id])
    supervisorId         String             @map("supervisor_id")
    allocationInstance   AllocationInstance @relation(fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, slug])
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    shortlistedIn        Shortlist[]
    preferenceIn         Preference[]
    allocatedTo          ProjectAllocation?
    flagOnProjects       FlagOnProject[]
    tagOnProject         TagOnProject[]
}

model Shortlist {
    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @map("project_id")
    student   Student @relation(fields: [studentId], references: [id])
    studentId String  @map("student_id")

    @@id([projectId, studentId])
}

model Preference {
    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @map("project_id")
    student   Student @relation(fields: [studentId], references: [id])
    studentId String  @map("student_id")
    rank      Float

    @@id([projectId, studentId])
    @@unique([rank, studentId])
}

model ProjectAllocation {
    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @unique @map("project_id")
    student   Student @relation(fields: [studentId], references: [id])
    studentId String  @map("student_id")

    @@id([projectId, studentId])
}

model Flag {
    id             String          @id @default(uuid())
    title          String          @unique
    students       Student[]
    flagOnProjects FlagOnProject[]
    flagOnStudent  FlagOnStudent[]
}

model FlagOnProject {
    flag      Flag    @relation(fields: [flagId], references: [id])
    flagId    String  @map("flag_id")
    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @map("project_id")

    @@id([flagId, projectId])
}

model FlagOnStudent {
    flag      Flag    @relation(fields: [flagId], references: [id])
    flagId    String  @map("flag_id")
    student   Student @relation(fields: [studentId], references: [id])
    studentId String  @map("student_id")

    @@id([flagId, studentId])
}

model Tag {
    id           String         @id @default(uuid())
    title        String         @unique
    tagOnProject TagOnProject[]
}

model TagOnProject {
    tag       Tag     @relation(fields: [tagId], references: [id])
    tagId     String  @map("tag_id")
    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @map("project_id")

    @@id([tagId, projectId])
}

model Invitation {
    userEmail  String @id @map("user_email")
    role       Role
    signUpCode String @default(uuid()) @map("sign_up_code")

    @@unique([userEmail, role])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
