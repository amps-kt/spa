generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Stage {
    SETUP
    PROJECT_SUBMISSION
    PROJECT_SELECTION
    PROJECT_ALLOCATION
    ALLOCATION_ADJUSTMENT
    ALLOCATION_PUBLICATION
}

enum AlgorithmFlag {
    MAXSIZE
    GEN
    GRE
    MINCOST
    MINSQCOST
    LSB

    @@map("algorithm_flag")
}

enum PreferenceType {
    SHORTLIST
    PREFERENCE

    @@map("preference_type")
}

model UserInInstance {
    user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId               String             @map("user_id")
    joined               Boolean            @default(false)
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    // ---
    studentDetails       StudentDetails?    @relation(name: "student_details")
    supervisorDetails    SupervisorDetails? @relation(name: "supervisor_details")
    readerDetails        ReaderDetails?     @relation(name: "reader_details")

    @@id(name: "instanceMembership", [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("user_in_instance")
}

model SuperAdmin {
    userId String @id @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("super_admin")
}

model GroupAdmin {
    userId            String          @map("user_id")
    user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    // ---
    allocationGroupId String          @map("allocation_group_id")
    allocationGroup   AllocationGroup @relation(fields: [allocationGroupId], references: [id], onDelete: Cascade)

    @@id(name: "groupAdminId", map: "group_admin_id", [userId, allocationGroupId])
    @@map("group_admin")
}

model SubGroupAdmin {
    userId               String             @map("user_id")
    user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationGroup      AllocationGroup    @relation(fields: [allocationGroupId], references: [id], onDelete: Cascade)
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationSubGroup   AllocationSubGroup @relation(fields: [allocationGroupId, allocationSubGroupId], references: [allocationGroupId, id], onDelete: Cascade)

    @@id(name: "subGroupAdminId", map: "sub_group_admin_id", [userId, allocationGroupId, allocationSubGroupId])
    @@map("sub_group_admin")
}

model AllocationGroup {
    id                  String               @id
    displayName         String               @unique @map("display_name")
    // ---
    allocationSubGroups AllocationSubGroup[]
    groupAdmins         GroupAdmin[]
    subGroupAdmins      SubGroupAdmin[]

    @@map("allocation_group")
}

model AllocationSubGroup {
    id                  String
    displayName         String               @map("display_name")
    // ---
    allocationGroupId   String               @map("allocation_group_id")
    allocationGroup     AllocationGroup      @relation(fields: [allocationGroupId], references: [id], onDelete: Cascade)
    // ---
    allocationInstances AllocationInstance[]
    subGroupAdmins      SubGroupAdmin[]

    @@id(name: "subGroupId", map: "sub_group_id", [allocationGroupId, id])
    @@map("allocation_sub_group")
}

model AllocationInstance {
    id                                  String
    displayName                         String                      @map("display_name")
    stage                               Stage                       @default(SETUP)
    selectedAlgName                     String?                     @map("selected_alg_name")
    parentInstanceId                    String?                     @map("parent_instance_id")
    // supervisor details
    projectSubmissionDeadline           DateTime                    @map("project_submission_deadline")
    supervisorAllocationAccess          Boolean                     @default(false) @map("supervisor_allocation_access")
    // student details
    minStudentPreferences               Int                         @map("min_student_preferences")
    maxStudentPreferences               Int                         @map("max_student_preferences")
    maxStudentPreferencesPerSupervisor  Int                         @map("max_student_preferences_per_supervisor")
    studentPreferenceSubmissionDeadline DateTime                    @map("student_preference_submission_deadline")
    studentAllocationAccess             Boolean                     @default(false) @map("student_allocation_access")
    // reader details
    minReaderPreferences                Int                         @map("min_reader_preferences")
    maxReaderPreferences                Int                         @map("max_reader_preferences")
    readerPreferenceSubmissionDeadline  DateTime                    @map("reader_preference_submission_deadline")
    // ---
    allocationGroupId                   String                      @map("allocation_group_id")
    allocationSubGroupId                String                      @map("allocation_sub_group_id")
    allocationSubGroup                  AllocationSubGroup          @relation(fields: [allocationGroupId, allocationSubGroupId], references: [allocationGroupId, id], onDelete: Cascade)
    // ---
    users                               UserInInstance[]
    projects                            ProjectInInstance[]
    studentFlags                        FlagOnStudent[]
    algorithmConfigurations             AlgorithmConfigInInstance[]
    flags                               Flag[]
    tags                                Tag[]
    matchingResults                     MatchingResult[]
    gradingComponents                   AssessmentComponent[]
    componentScores                     ComponentScore[]
    finalGrades                         FinalGrade[]

    @@id(name: "instanceId", map: "instance_id", [allocationGroupId, allocationSubGroupId, id])
    @@map("allocation_instance")
}

model StudentDetails {
    studentLevel                Int                          @map("student_level")
    latestSubmissionDateTime    DateTime?                    @map("latest_submission_date_time")
    projectAllocation           StudentProjectAllocation?    @relation(name: "project_allocation")
    // ---
    userId                      String                       @map("user_id")
    allocationGroupId           String                       @map("allocation_group_id")
    allocationSubGroupId        String                       @map("allocation_sub_group_id")
    allocationInstanceId        String                       @map("allocation_instance_id")
    // ---
    userInInstance              UserInInstance               @relation(name: "student_details", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, onUpdate: Cascade)
    studentFlags                FlagOnStudent[]
    studentDraftPreferences     StudentDraftPreference[]
    studentSubmittedPreferences StudentSubmittedPreference[]

    @@id(name: "studentDetailsId", map: "student_details_id", [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("student_details")
}

model SupervisorDetails {
    projectAllocationLowerBound Int                 @map("project_allocation_lower_bound")
    projectAllocationTarget     Int                 @map("project_allocation_target")
    projectAllocationUpperBound Int                 @map("project_allocation_upper_bound")
    // ---
    userId                      String              @map("user_id")
    allocationGroupId           String              @map("allocation_group_id")
    allocationSubGroupId        String              @map("allocation_sub_group_id")
    allocationInstanceId        String              @map("allocation_instance_id")
    // ---
    userInInstance              UserInInstance      @relation(name: "supervisor_details", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, onUpdate: Cascade)
    projects                    ProjectInInstance[]

    @@id(name: "supervisorDetailsId", map: "supervisor_details_id", [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("supervisor_details")
}

model ReaderDetails {
    projectAllocationLowerBound Int            @map("project_allocation_lower_bound")
    projectAllocationTarget     Int            @map("project_allocation_target")
    projectAllocationUpperBound Int            @map("project_allocation_upper_bound")
    // ---
    userId                      String         @map("user_id")
    allocationGroupId           String         @map("allocation_group_id")
    allocationSubGroupId        String         @map("allocation_sub_group_id")
    allocationInstanceId        String         @map("allocation_instance_id")
    // ---
    userInInstance              UserInInstance @relation(name: "reader_details", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, onUpdate: Cascade)

    @@id(name: "readerDetailsId", map: "reader_details_id", [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("reader_details")
}

model ProjectInInstance {
    projectId                     String                       @map("project_id")
    details                       ProjectDetails               @relation(fields: [projectId], references: [id], onDelete: Cascade)
    // ---
    allocationGroupId             String                       @map("allocation_group_id")
    allocationSubGroupId          String                       @map("allocation_sub_group_id")
    allocationInstanceId          String                       @map("allocation_instance_id")
    allocationInstance            AllocationInstance           @relation(fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id])
    // ---
    supervisorId                  String                       @map("supervisor_id")
    supervisor                    SupervisorDetails            @relation(fields: [supervisorId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    // ---
    inStudentDraftPreferences     StudentDraftPreference[]
    inStudentSubmittedPreferences StudentSubmittedPreference[]
    inReaderDraftPreferences      ReaderDraftPreference[]
    inReaderSubmittedPreferences  ReaderSubmittedPreference[]
    studentAllocations            StudentProjectAllocation[]

    @@id(name: "projectInInstanceId", map: "project_in_instance_id", [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("project_in_instance")
}

// TODO: keep version history somehow?
model ProjectDetails {
    id                           String              @id @default(uuid())
    title                        String
    description                  String
    specialTechnicalRequirements String?             @map("special_technical_requirements")
    latestEditDateTime           DateTime            @default(now()) @map("latest_edit_date_time")
    capacityLowerBound           Int                 @map("capacity_lower_bound")
    capacityUpperBound           Int                 @map("capacity_upper_bound")
    preAllocatedStudentId        String?             @map("pre_allocated_student_id")
    // ---
    flagsOnProject               FlagOnProject[]
    tagsOnProject                TagOnProject[]
    projectInInstance            ProjectInInstance[]

    @@map("project_details")
}

model StudentDraftPreference {
    projectId            String            @map("project_id")
    userId               String            @map("user_id")
    score                Float
    type                 PreferenceType
    // ---
    allocationGroupId    String            @map("allocation_group_id")
    allocationSubGroupId String            @map("allocation_sub_group_id")
    allocationInstanceId String            @map("allocation_instance_id")
    // ---
    project              ProjectInInstance @relation(fields: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    student              StudentDetails    @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "draftPreferenceId", [projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model StudentSubmittedPreference {
    projectId            String            @map("project_id")
    userId               String            @map("user_id")
    rank                 Int
    // ---
    allocationGroupId    String            @map("allocation_group_id")
    allocationSubGroupId String            @map("allocation_sub_group_id")
    allocationInstanceId String            @map("allocation_instance_id")
    // ---
    project              ProjectInInstance @relation(fields: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    student              StudentDetails    @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "studentSubmittedPreferenceId", map: "student_submitted_preference_id", [projectId, userId])
    @@unique([projectId, userId, rank])
    @@map("submitted_preference")
}

model StudentProjectAllocation {
    projectId            String            @map("project_id")
    userId               String            @map("user_id")
    studentRanking       Int               @map("student_ranking")
    // ---
    allocationGroupId    String            @map("allocation_group_id")
    allocationSubGroupId String            @map("allocation_sub_group_id")
    allocationInstanceId String            @map("allocation_instance_id")
    // ---
    project              ProjectInInstance @relation(fields: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    student              StudentDetails    @relation(name: "project_allocation", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "studentProjectAllocationId", map: "student_project_allocation_id", [projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@unique([userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("student_project_allocation")
}

model ReaderDraftPreference {
    projectId            String            @map("project_id")
    userId               String            @map("user_id")
    score                Float
    type                 PreferenceType
    // ---
    allocationGroupId    String            @map("allocation_group_id")
    allocationSubGroupId String            @map("allocation_sub_group_id")
    allocationInstanceId String            @map("allocation_instance_id")
    // ---
    project              ProjectInInstance @relation(fields: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "readerDraftPreferenceId", [projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model ReaderSubmittedPreference {
    projectId            String            @map("project_id")
    userId               String            @map("user_id")
    rank                 Int
    // ---
    allocationGroupId    String            @map("allocation_group_id")
    allocationSubGroupId String            @map("allocation_sub_group_id")
    allocationInstanceId String            @map("allocation_instance_id")
    // ---
    project              ProjectInInstance @relation(fields: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [projectId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "readerSubmittedPreferenceId", map: "reader_submitted_preference_id", [projectId, userId])
    @@unique([projectId, userId, rank])
    @@map("reader_submitted_preference")
}

model ReaderProjectAllocation {
    projectId            String @map("project_id")
    userId               String @map("user_id")
    // ---
    allocationGroupId    String @map("allocation_group_id")
    allocationSubGroupId String @map("allocation_sub_group_id")
    allocationInstanceId String @map("allocation_instance_id")

    @@id(name: "readerProjectAllocationId", map: "reader_project_allocation_id", [projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@unique([userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("reader_project_allocation")
}

model AssessmentComponent {
    id                   String             @id @default(uuid())
    flagId               String             @map("flag_id")
    flag                 Flag               @relation(fields: [flagId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [id, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    title                String
    weight               Int
    layoutIndex          Int                @map("layout_index")
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    componentScores      ComponentScore[]

    @@map("assessment_component")
}

model ComponentScore {
    id                    String              @id @default(uuid())
    markerId              String              @map("marker_id")
    studentId             String              @map("student_id")
    grade                 Int
    justification         String
    // ---
    flagId                String              @map("flag_id")
    assessmentComponentId String              @map("assessment_component_id")
    allocationGroupId     String              @map("allocation_group_id")
    allocationSubGroupId  String              @map("allocation_sub_group_id")
    allocationInstanceId  String              @map("allocation_instance_id")
    // ---
    gradingComponent      AssessmentComponent @relation(fields: [assessmentComponentId], references: [id], onDelete: Cascade)
    allocationInstance    AllocationInstance  @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)

    @@unique([markerId, studentId, assessmentComponentId])
    @@map("component_score")
}

model FinalGrade {
    id                   String             @id @default(uuid())
    studentId            String             @map("student_id")
    grade                Int
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)

    @@unique([studentId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("final_grade")
}

model Flag {
    id                   String                @id @default(uuid())
    title                String
    description          String
    // ---
    allocationGroupId    String                @map("allocation_group_id")
    allocationSubGroupId String                @map("allocation_sub_group_id")
    allocationInstanceId String                @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance    @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    flagOnProjects       FlagOnProject[]
    flagOnStudents       FlagOnStudent[]
    gradingComponents    AssessmentComponent[]

    @@unique([id, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@unique([title, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("flag")
}

model FlagOnProject {
    flag      Flag           @relation(fields: [flagId], references: [id], onDelete: Cascade)
    flagId    String         @map("flag_id")
    project   ProjectDetails @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String         @map("project_id")

    @@id(name: "flagOnProjectId", map: "flag_on_project_id", [flagId, projectId])
    @@map("flag_on_project")
}

model FlagOnStudent {
    flag                 Flag               @relation(fields: [flagId], references: [id], onDelete: Cascade)
    flagId               String             @map("flag_id")
    student              StudentDetails     @relation(fields: [studentId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    studentId            String             @map("student_id")
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)

    @@id(name: "flagOnStudentId", map: "flag_on_student_id", [flagId, studentId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("flag_on_student")
}

model Tag {
    id                   String             @id @default(uuid())
    title                String
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    tagOnProject         TagOnProject[]

    @@unique([title, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("tag")
}

model TagOnProject {
    tag       Tag            @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId     String         @map("tag_id")
    project   ProjectDetails @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String         @map("project_id")

    @@id(name: "tagOnProjectId", map: "tag_on_project_id", [tagId, projectId])
    @@map("tag_on_project")
}

model AlgorithmConfig {
    id                 String         @id @default(uuid())
    algName            String         @map("alg_name")
    displayName        String         @map("display_name")
    description        String?
    targetModifier     Int            @default(0) @map("target_modifier")
    upperBoundModifier Int            @default(0) @map("upper_bound_modifier")
    maxRank            Int            @default(-1) @map("max_rank")
    flag1              AlgorithmFlag  @map("flag_1")
    flag2              AlgorithmFlag? @map("flag_2")
    flag3              AlgorithmFlag? @map("flag_3")

    @@map("algorithm_config")
}

model AlgorithmConfigInInstance {
    algorithmConfigId    String             @map("algorithm_config_id")
    matchingResultId     String             @map("matching_result_id")
    matchingResult       MatchingResult     @relation(fields: [matchingResultId], references: [id], onDelete: Cascade)
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)

    @@id(name: "algorithmConfigInInstanceId", map: "algorithm_config_in_instance_id", [algorithmConfigId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@map("algorithm_config_in_instance")
}

model MatchingResult {
    id                        String                      @id @default(uuid())
    modifiedAt                DateTime                    @updatedAt @map("modified_at")
    // details 
    profile                   Int[]
    degree                    Int
    size                      Int
    weight                    Int
    cost                      Int
    costSq                    Int                         @map("cost_sq")
    maxLecAbsDiff             Int                         @map("max_lec_abs_diff")
    sumLecAbsDiff             Int                         @map("sum_lec_abs_diff")
    matching                  Json
    ranks                     Int[]
    // ---
    allocationGroupId         String                      @map("allocation_group_id")
    allocationSubGroupId      String                      @map("allocation_sub_group_id")
    allocationInstanceId      String                      @map("allocation_instance_id")
    algName                   String                      @map("algorithm_name")
    // ---
    allocationInstance        AllocationInstance          @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    algorithmConfigInInstance AlgorithmConfigInInstance[]

    @@map("matching_result")
}

// model MatchingPair {
//     id                            String @id @default(uuid())
//     studentId                     String @map("student_id")
//     projectId                     String @map("project_id")
//     projectCapacity_lowerBound    Int    @map("project_capacity_lower_bound")
//     projectCapacity_upperBound    Int    @map("project_capacity_upper_bound")
//     preferenceRank                Int    @map("preference_rank")
//     supervisorId                  String @map("supervisor_id")
//     supervisorCapacity_lowerBound Int    @map("supervisor_capacity_lower_bound")
//     supervisorCapacity_target     Int    @map("supervisor_capacity_target")
//     supervisorCapacity_upperBound Int    @map("supervisor_capacity_upper_bound")
// }

model User {
    id              String           @id
    name            String
    email           String           @unique
    // ---
    userInInstances UserInInstance[]
    superAdmin      SuperAdmin?
    groupAdmin      GroupAdmin[]
    subGroupAdmin   SubGroupAdmin[]

    @@map("user")
}
